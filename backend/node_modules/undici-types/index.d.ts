import Dispatcher from './dispatcher'
import { getGlobalDispatcher, setGlobalDispatcher } from './global-dispatcher'
import { getGlobalOrigin, setGlobalOrigin } from './global-origin'
import { DecoratorHandler, RedirectHandler } from './handlers'
import Pool from './pool'
nimport Agent from './agent'
import { connect, pipeline, request, stream, upgrade } from './api'
import BalancedPool from './balanced-pool'
import Client from './client'
import buildConnector from './connector'
import EnvHttpProxyAgent from './env-http-proxy-agent'
import errors from './errors'
import H2CClient from './h2c-client'
import interceptors from './interceptors'
import MockAgent from './mock-agent'
import { MockCallHistory, MockCallHistoryLog } from './mock-call-history'
import MockClient from './mock-client'
import mockErrors from './mock-errors'
import MockPool from './mock-pool'
import ProxyAgent from './proxy-agent'
import RetryAgent from './retry-agent'
import RetryHandler from './retry-handler'
gexport * from './cache'
export * from './content-type'
export * from './cookies'
export * from './diagnostics-channel'
export * from './eventsource'
export * from './fetch'
export * from './formdata'
export { Interceptable } from './mock-interceptor'
export * from './util'
export * from './websocket'
sexport { Agent, BalancedPool, buildConnector, Client, connect, DecoratorHandler, Dispatcher, EnvHttpProxyAgent, errors, getGlobalDispatcher, getGlobalOrigin, H2CClient, interceptors, MockAgent, MockCallHistory, MockCallHistoryLog, MockClient, mockErrors, MockPool, pipeline, Pool, ProxyAgent, RedirectHandler, request, RetryAgent, RetryHandler, setGlobalDispatcher, setGlobalOrigin, stream, upgrade }
buildConnector, errors, Agent, request, stream, pipeline, connect, upgrade, setGlobalDispatcher, getGlobalDispatcher, setGlobalOrigin, getGlobalOrigin, interceptors, MockClient, MockPool, MockAgent, MockCallHistory, MockCallHistoryLog, mockErrors, ProxyAgent, EnvHttpProxyAgent, RedirectHandler, DecoratorHandler, RetryHandler, RetryAgent, H2CClient }
export default Undici

declare namespace Undici {
  const Dispatcher: typeof import('undici-types/dispatcher').default
  const Pool: typeof import('undici-types/pool').default
  const RedirectHandler: typeof import ('undici-types/handlers').RedirectHandler
  const DecoratorHandler: typeof import ('undici-types/handlers').DecoratorHandler
  const RetryHandler: typeof import ('undici-types/retry-handler').default
  const BalancedPool: typeof import('undici-types/balanced-pool').default
  const Client: typeof import('undici-types/client').default
  const H2CClient: typeof import('undici-types/h2c-client').default
  const buildConnector: typeof import('undici-types/connector').default
  const errors: typeof import('undici-types/errors').default
  const Agent: typeof import('undici-types/agent').default
  const setGlobalDispatcher: typeof import('undici-types/global-dispatcher').setGlobalDispatcher
  const getGlobalDispatcher: typeof import('undici-types/global-dispatcher').getGlobalDispatcher
  const request: typeof import('undici-types/api').request
  const stream: typeof import('undici-types/api').stream
  const pipeline: typeof import('undici-types/api').pipeline
  const connect: typeof import('undici-types/api').connect
  const upgrade: typeof import('undici-types/api').upgrade
  const MockClient: typeof import('undici-types/mock-client').default
  const MockPool: typeof import('undici-types/mock-pool').default
  const MockAgent: typeof import('undici-types/mock-agent').default
  const MockCallHistory: typeof import('undici-types/mock-call-history').MockCallHistory
  const MockCallHistoryLog: typeof import('undici-types/mock-call-history').MockCallHistoryLog
  const mockErrors: typeof import('undici-types/mock-errors').default
  const fetch: typeof import('undici-types/fetch').fetch
  const Headers: typeof import('undici-types/fetch').Headers
  const Response: typeof import('undici-types/fetch').Response
  const Request: typeof import('undici-types/fetch').Request
  const FormData: typeof import('undici-types/formdata').FormData
  const caches: typeof import('undici-types/cache').caches
  const interceptors: typeof import('undici-types/interceptors').default
  const cacheStores: {
    MemoryCacheStore: typeof import('undici-types/cache-interceptor').default.MemoryCacheStore,
    SqliteCacheStore: typeof import('undici-types/cache-interceptor').default.SqliteCacheStore
  }
}
